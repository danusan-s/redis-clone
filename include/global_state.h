#pragma once
#ifndef GLOBAL_STATE_H
#define GLOBAL_STATE_H

#include "buffer.h"
#include "dlist.h"
#include "hashtable.h"
#include "heap.h"
#include "thread_pool.h"

// Connection struct to manage client connections
struct Conn {
  int fd = -1;

  // Application's intention for the event loop
  bool want_read = false;
  bool want_write = false;
  bool want_close = false;

  // Buffered input and output per connection
  Buffer incoming; // Data to be parsed by the application
  Buffer outgoing; // Responses generated by the application

  // Timer for closing idle connections
  uint64_t last_active_ms = 0;
  DList idle_node;
};

// Global data structure
struct GlobalData {
  HMap db;                     // Top-level hashtable
  std::vector<Conn *> fd2conn; // Map of all connections
  DList idle_list;             // Doubly linked list head
  std::vector<HeapItem> heap;  // Heap to store TTL
  ThreadPool thread_pool;      // Thread pool for async operations
};

inline GlobalData g_data;

#endif // GLOBAL_STATE_H
